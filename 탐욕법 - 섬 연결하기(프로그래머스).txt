# 탐욕법 - 섬 연결하기

# 나의 코드

def solution(n, costs):
    costs.sort(key = lambda x: x[2])
    v = list()
    sum = 0
    line_num = 0
    
    for i in range(len(costs)):
        count = 0
        for j in range(2):
            if costs[i][j] not in v:
                v.append(costs[i][j])
                count += 1
            else:
                continue
        if count == 1 or count == 2:
            sum += costs[i][2]
            line_num += 1
    
        if line_num == n-1:
            return sum

<문제점>
가장 짧은 것을 찾고 연결하려고 하니 0-1 // 2-3 // 4-5 가 만약 제일 짧게 연결 되어 있었다면
해결할 수 없었다.

<다른 사람 답>
def solution(n, costs):
    # kruskal algorithm
    ans = 0
    costs.sort(key = lambda x: x[2]) # cost 기준으로 오름차순 정렬
    routes = set([costs[0][0]]) # 집합
    while len(routes)!=n:
        for i, cost in enumerate(costs):
            if cost[0] in routes and cost[1] in routes:
                continue
            if cost[0] in routes or cost[1] in routes:
                routes.update([cost[0], cost[1]])
                ans += cost[2]
                costs[i] = [-1, -1, -1]
                break
    return ans 


<해결>
이것은 처음을 시작으로 한 쪽이 연결되어 있을 때만 다음 연결을 시도한다. 
알아두어야 할 것.
set.update() 이것이 list.append()의 역할을 한다. 