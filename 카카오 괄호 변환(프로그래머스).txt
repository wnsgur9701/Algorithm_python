# 프로그래머스 2020 KAKAO BLIND RECRUITMENT 괄호 변환
https://programmers.co.kr/learn/courses/30/lessons/60058

문제 설명 : 괄호가 올바르게 배열 되도록 하여라. 
	예시) (())()() ---> 올바른 괄호 ///// 	)))((( -----> 올바른 괄호 x

###매개변수 설명:
p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.
만약 p가 이미 올바른 괄호 문자열이라면 그대로 return 하면 됩니다.
 
문제 설명.
입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.


# 나의 코드.
def solution(p):
    u = ''
    v = ''
    number = 0
    state = True
    count_left = 0
    count_right = 0
    sub_count_left = 0
    sub_count_right = 0
    result = ''
    if len(p) == 0:
        return ''    
    for i in range(len(p)):
        if p[i] == '(':
            count_left += 1
        else:
            count_right += 1
        if count_left == count_right:
            number = i
            break
    u = p[:number+1]
    v = p[number+1:]
    for index in range(len(u)):
        if u[index] == '(':
            sub_count_left += 1
        else:
            sub_count_right += 1

        if sub_count_left < sub_count_right:
            state = False
            break
    if state == True:
        return u + solution(v)
    if state == False:
        result = '(' + solution(v) + ')'
        u = u[1:-1]
        for i in range(len(u)):
            if u[i] == ')':
                u = u[:i] + '(' + u[i+1:]
            else:
                u = u[:i] + ')' + u[i+1:]
        return result + u

# 어려웠던점.
문제를 풀면서 재귀함수에 대한 이해가 아직 부족하다는 것을 알았다. 그리고 str변수를 추가하고 제거 할 때는 append와같은
함수를 쓸 수 없고 배열을 잘라서 합쳐야 된다는 것을 알 수 있었다.

# 문제 해설
먼저 이 문제는 재귀 함수를 이용한 것이기 때문에 만약 p에 입력되는 것이 0 일때는 ''를 호출한다. (왜냐하면 p는 항상 균형잡힌 괄호 문자열)
그리고 이 문제에서 핵심은 균형잡힌 괄호 문자열로 나누고 그 균형잡힌 괄호 문자열이 올바른 괄호 문자열인지 아닌지 확인하여
처리하는 방식이 달라진다. 균형잡힌 괄호 문자열을 나누는 과정은 count_left 와 count_right를 설정하여 같아지는 지점을 설정 했다. 그리고 
sub_count_left와 sub_count_right를 설정해서 만약 right가 커지는 지점이 한 번 이라도 있으면 균형잡히지 않은 배열이라고 설정해서 다른
처리를 했다. 다른 처리의 과정에는 ')'를 '(' 로 변환하는데 스트링은 u[3] = ')' 이러한 식으로 넣지 못하고  u = u[:i] + '(' + u[i+1:] 이렇게 배열을
쪼개서 넣어야 한다는 것을 알았다.

# 느낀점.
문제해석을 잘하자...너무 오래 걸렸다...

