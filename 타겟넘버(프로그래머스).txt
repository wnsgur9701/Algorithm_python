<1번째 풀이>
def solution(numbers, target):
    main_list = [0] # 적절히 더하고 뺸 모든 숫자들의 조합을 배열로 저장
    for number in numbers: 
        sub_list = [] # 숫자 1개를 사용하면 sub_list는 []로 업데이트한다.  
        for stand in main_list: # main_list안에는 모든 경우의 수가 다 담겨져 있기 때문에 거기다가 
            sub_list.append(stand - number) # numbers에 있는 숫자들을 차례대로 더해주고 뺴주면 된다.
            sub_list.append(stand + number)
        main_list = sub_list

    answer = main_list.count(target) # count() 매개변수와 맞는 것은 세는 함수
    return answer

트리의 개념




<2번째 풀이>
from itertools import product # itertools에서 product함수 호출
def solution(numbers, target):
    l = [(x, -x) for x in numbers] # 넘버 안에 있는 모든 수를 [(1, -1), (2,-2), ''''''] 이러한 식으로 저장 
    s = list(map(sum, product(*l))) # 안에 모든 조합의 수를 집어넣고 더한후 리스트로 만든다.
    return s.count(target)


참고
items = ['1', '2', '3', '4', '5']
from itertools import permutations 배열
list(permutations(items, 2))
# [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '1'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '1'), ('3', '2'), ('3', '4'), ('3', '5'), ('4', '1'), ('4', '2'), ('4', '3'), ('4', '5'), ('5', '1'), ('5', '2'), ('5', '3'), ('5', '4')]

from itertools import combinations 조합
list(combinations(items, 2))
# [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'), ('3', '5'), ('4', '5')]
